// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String
  email    String @unique

  sessions Session[]

  questionnaire Questionnaire[]

  skincareRecommendation SkincareRecommendation?
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token     String   @unique
  expiresAt DateTime

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Questionnaire {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  responses QuestionnaireResponse[]
}

model QuestionnaireResponse {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionId String
  answer     String

  questionnaireId String        @db.Uuid
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}

model SkincareProduct {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  link        String?

  brand              String?
  concerns           String[] //ensum ACNE, HYDRATION, DARK SPOTS, ETC
  recommendationNote String?

  category String //enum CLEANSER, MOISTURIZER, SERUM, SUNSCREEN

  recommendationId String                 @db.Uuid
  recommendation   SkincareRecommendation @relation(fields: [recommendationId], references: [id])
}

model SkincareRecommendation {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  products SkincareProduct[]
}
